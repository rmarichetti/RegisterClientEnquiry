package com.aarna.www.registerclientenquiry;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.os.AsyncTask;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

/**
 * Created by thirumalai on 11.12.17.
 */

public class BackgroundWorker extends AsyncTask<String,Void,String> {
    Context context;
    String sResult;
    AlertDialog alertDialog;
    String sType;
    BackgroundWorker (Context ctx){
        context = ctx;
    }
    @Override
    protected String doInBackground(String... params){
        sType = params[0];
        String login_url = "http://210.18.139.72/bookings/loginAndroid.php";
        String getRegDetails_url = "http://210.18.139.72/bookings/getRegistrationDetails.php";
        String regClient_url = "http://210.18.139.72/bookings/regNewClient.php";
        String regDelClient_url = "http://210.18.139.72/bookings/regDeleteClient.php";

        if(sType.equals("login")){
            try {
                String sLogin = params[1];
            String sPassword = params[2];
            URL url = new URL(login_url);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setDoInput(true);
            OutputStream outputStream= httpURLConnection.getOutputStream();
            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream,"UTF-8"));
            String post_data = URLEncoder.encode("username","UTF-8")+"="+URLEncoder.encode(sLogin,"UTF-8")+"&"
                    +URLEncoder.encode("password","UTF-8")+"="+URLEncoder.encode(sPassword,"UTF-8");
            bufferedWriter.write(post_data);
            bufferedWriter.flush();
            bufferedWriter.close();
            outputStream.close();

            InputStream inputStream = httpURLConnection.getInputStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream,"iso-8859-1"));
            sResult="";
            String sLine="";
            while ((sLine = bufferedReader.readLine())!=null){
                sResult += sLine;

            }
            bufferedReader.close();
            inputStream.close();
            httpURLConnection.disconnect();
            return sResult;

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        }
        else if(sType.equals("registerDelete")){

        }
        else if(sType.equals("register")){
            try {
                String sName = params[1];
                String sPhone = params[2];
                String sEventDate = params[3];
                String sComments = params[4];
                String sConfirmBy = params[5];
                String sLoc = params[6];
                String sClientID = params[7];
                if (sClientID== null)
                    sClientID = "";
//                URL url = new URL(login_url);
                URL url = new URL(regClient_url);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setRequestMethod("POST");
                httpURLConnection.setDoOutput(true);
                httpURLConnection.setDoInput(true);
                OutputStream outputStream= httpURLConnection.getOutputStream();
                BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream,"UTF-8"));
//                String post_data = URLEncoder.encode("username","UTF-8")+"="+URLEncoder.encode(sName,"UTF-8")+"&"
//                        +URLEncoder.encode("password","UTF-8")+"="+URLEncoder.encode(sPhone,"UTF-8");
                String post_data = URLEncoder.encode("Name","UTF-8")+"="+URLEncoder.encode(sName,"UTF-8")+"&"
                       +URLEncoder.encode("Phone","UTF-8")+"="+URLEncoder.encode(sPhone,"UTF-8")+"&"
                        +URLEncoder.encode("EventDate","UTF-8")+"="+URLEncoder.encode(sEventDate,"UTF-8")+"&"
                        +URLEncoder.encode("Comments","UTF-8")+"="+URLEncoder.encode(sComments,"UTF-8")+"&"
                        +URLEncoder.encode("ConfirmBy","UTF-8")+"="+URLEncoder.encode(sConfirmBy,"UTF-8")+"&"
                        +URLEncoder.encode("Loc","UTF-8")+"="+URLEncoder.encode(sLoc,"UTF-8")+"&"
                        +URLEncoder.encode("ClientID","UTF-8")+"="+URLEncoder.encode(sClientID,"UTF-8")+"&"
                        +URLEncoder.encode("UserID","UTF-8")+"="+URLEncoder.encode(registerClient.USERID_EXTRA,"UTF-8");
                bufferedWriter.write(post_data);
                bufferedWriter.flush();
                bufferedWriter.close();
                outputStream.close();

                InputStream inputStream = httpURLConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream,"iso-8859-1"));
                sResult="";
                String sLine="";
                while ((sLine = bufferedReader.readLine())!=null){
                    sResult += sLine;

                }
                bufferedReader.close();
                inputStream.close();
                httpURLConnection.disconnect();
                return sResult;

            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else if(sType.equals("getRegDetails")){
            try {
                String sClientID = params[1];
                URL url = new URL(getRegDetails_url);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setRequestMethod("POST");
                httpURLConnection.setDoOutput(true);
                httpURLConnection.setDoInput(true);
                OutputStream outputStream = httpURLConnection.getOutputStream();
                BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));
                String post_data = URLEncoder.encode("ClientID", "UTF-8") + "=" + URLEncoder.encode(sClientID, "UTF-8");
                bufferedWriter.write(post_data);
                bufferedWriter.flush();
                bufferedWriter.close();
                outputStream.close();

                InputStream inputStream = httpURLConnection.getInputStream();
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "iso-8859-1"));
                sResult = "";
                String sLine = "";
                while ((sLine = bufferedReader.readLine()) != null) {
                    sResult += sLine;

                }
                bufferedReader.close();
                inputStream.close();
                httpURLConnection.disconnect();
                return sResult;

            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
        return null;
    }

    @Override
    protected void onPreExecute() {
        alertDialog  = new AlertDialog.Builder(context).create();
        alertDialog.setTitle("LoginStatus");
    }


    @Override
    protected void onPostExecute(String sResult) {
        if (sType == "getRegDetails"){
            if(sResult == null)
            {
                //showClientRegn.td.setText("Unable to fetch record");
            }
            else if(sResult.contains("Fetch Success"))
            {
                parseResultAndFillRegisterPage();
            }
        }
        else {
            if(sResult == null)
            {
                //registerClient.etName.setText("testing");
                // do what you want to do
            }
            else if(sResult.contains("Registration Success"))
            {
                Toast.makeText(context, sResult, Toast.LENGTH_LONG).show();
                registerClient.sClient = sResult.substring(sResult.indexOf(":") + 1);
            }
            else if(sResult.contains("Login Success")) // msg you get from success like "Login Success"
            {
                alertDialog.setMessage(sResult);
                alertDialog.show();
                context.startActivity(new Intent(context, registerClient.class));
                //registerClient.sUserid = sResult.substring(sResult.indexOf(":") + 1,sResult.indexOf("Role") );
            }

        }

    }

    @Override
    protected void onProgressUpdate(Void... values) {
        super.onProgressUpdate(values);
    }
    private boolean parseResultAndFillRegisterPage(){
        try {
            JSONArray JA = new JSONArray(sResult);
            for (int row=0; row < JA.length()-1;row++){
                JSONObject jsonObject = (JSONObject)JA.get(row);
                registerClient.etName.setText((String)jsonObject.get("Name"));
                registerClient.etPhone.setText((String)jsonObject.get("Phone"));
                registerClient.etEventDate.setText((String)jsonObject.get("EventDate"));
                registerClient.etLoc.setText((String)jsonObject.get("hallLocation"));
                registerClient.etConfirmBy.setText((String)jsonObject.get("ConfirmBy"));
                registerClient.etComments.setText((String)jsonObject.get("Comments"));

            }
        } catch (JSONException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }
}
